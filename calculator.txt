/ get menu input
Menu, INPUT
Store MenuChoice

/ check 'a' for addition
Load MenuChoice
Subt A
Skipcond 400
Jump NotA
Jump AddFunc

/ check 's' for subtraction
NotA, Load MenuChoice
Subt S
Skipcond 400
Jump NotS
Jump SubtractFunc

/ check 'm' for multiplication
NotS, Load MenuChoice
Subt M
Skipcond 400
Jump NotM
Jump MultiplyFunc

/ check 'd' for division
NotM, Load MenuChoice
Subt D
Skipcond 400
Jump NotD
Jump DivideFunc

/ check 'p' for power/exponent
NotD, Load MenuChoice
Subt P
Skipcond 400
Jump NotP
Jump PowerFunc

NotP, halt

/ put math code here
/ addition subroutine wrapper
/ input x and y
AddFunc, INPUT
         Store InputX
         INPUT
         Store InputY
         / add x and y, and then output
         Load InputX
         Add InputY
         Output
         / jump back to menu
         Jump Menu
/ subtraction subroutine wrapper
/ input x and y
SubtractFunc, INPUT
              Store InputX
              INPUT
              Store InputY
              / subtract y from x and output
              Load InputX
              Subt InputY
              Output
              / jump back to menu
              Jump Menu
/ multiply for menu
/ multiplication subroutine wrapper
/ input x and y
MultiplyFunc, INPUT
              Store InputX
              Input
              Store InputY
              / jump to MultiplyNumbers subroutine
              JnS MultiplyNumbers
              / get result and output it
              Load Result
              Output
              / jump back to menu
              Jump Menu
/ division subroutine wrapper
/ input x and y
DivideFunc, INPUT
            Store InputX
            Input
            Store InputY
            / jump to DivideNumbers subroutine
            JnS DivideNumbers
            / load result and output it
            Load Result
            Output
            / jump back to menu
            Jump Menu
/ power/exponent calculation subroutine wrapper
/ input x and y
PowerFunc, INPUT
           Store InputX
           Input
           Store InputY
           / jump to Exp subroutine
           JnS Exp
           / load result and output it
           Load Result
           Output
           / jump back to menu
           Jump Menu

/ multiplication function
MultiplyNumbers, DEC 0
                 CLEAR
                 Store Result
                 / load y if it's negative, negate it, mark negflag as 1
                 Load InputY
                 Skipcond 000
                 / if y is positive, jump to MultiplyYNonNeg subroutine
                 Jump MultiplyYNonNeg

                 Subt InputY
                 Subt InputY
                 Store InputY
                 Clear
                 Add One
                 Store negflag
                 Clear
                 / jumpt to MultiplyLoop subroutine
                 Jump MultiplyLoop

MultiplyYNonNeg,  Clear
                  Store negflag

/ multiplication loop subroutine
MultiplyLoop, Load Result
                  Add InputX
                  Store Result
                  Load InputY
                  Subt One
                  Store InputY
                  Skipcond 400 / have we completed the multiplication?
                  Jump MultiplyLoop / no; repeat loop
                  / yes, so exit the loop
                 / check for negative flag, if it is set, negate the result
                  / load negative flag, and if it's negative, jump to multResultNonNeg subroutine
                  Load negflag
                  Skipcond 800
                  Jump multResultNonNeg

                  / negate result
                  Load Result
                  Subt Result
                  Subt Result
                  Store Result
                  / jump back to multiplication wrapper
multResultNonNeg, JumpI MultiplyNumbers

// division calculation subroutine
DivideNumbers, DEC 0
CLEAR
Store Result
Store negflag
/ negation is Load, Subt, Subt, Store
/ load y and if it's negative negate it
Load InputY
Skipcond 000
/ if y not negative, jump to checkX subroutine
Jump checkX

Subt InputY
Subt InputY
Store InputY
Load negflag
Add One
Store negflag

/ load x and if it's not negative, jump to DivideLoop
/ negate x and set negative flag
checkX, Load InputX
Skipcond 000
Jump DivideLoop

Subt InputX
Subt InputX
Store InputX
Load negflag
Add One
Store negflag

/ loop for division calculation
/ repeatedly subtracting y from x while (x - y)>=0
DivideLoop, Clear
Load InputX
Subt InputY
Store InputX
Load Result
Add One
Store Result
Load InputX
Subt InputY
/ AC now holds InputX - InputY
/ if AC > 0, continue loop
/ if AC <= 0, exit loop
Skipcond 000 / have we completed the division?
Jump DivideLoop / no; repeat loop
/ yes, so exit the loop
/ if negative flag is 1, negate result, else jump to divResultNonNeg subroutine
Load negflag
Subt One
Skipcond 400
Jump divResultNonNeg
Load Result
Subt Result
Subt Result
Store Result

/ jump back to DivideNumbers
divResultNonNeg, JumpI DivideNumbers


/ exponent calculation subroutine
Exp, DEC 0
Clear
Store Result
/ load y, if y < 0, jump back to Exp
Load InputY
Skipcond 000
/ if y > 0, jump to Power Multiply
Jump PowerMultiply
JumpI Exp

/ multiplication for exponent calculation subroutine
/ store X as base and Y as power 
PowerMultiply, Load One
Store Result
Load InputX
Store Base
Load InputY
Store Power
/ multiply x by itself as long as y > 0
PowerLoop, Load Result
Store InputX
Load Base
Store InputY
JnS MultiplyNumbers
Load Power
Subt One
Store Power
/ if exponent = 0, get out of loop, else repeat
Skipcond 400
Jump PowerLoop
JumpI Exp


/ the constant 1 and 0
One, DEC 1
Zero, DEC 0

/ used to get the user menu input
MenuChoice, DEC 0

/ decimal representations of menu characters
A, DEC 97
S, DEC 115
M, DEC 109
D, DEC 100
P, DEC 112
/ input, result, and negative flag variables
InputX, DEC 0
InputY, DEC 0
Result, DEC 0
negflag, DEC 0
/ variables for exponent subroutine
Base, DEC 0
Power, DEC 0
